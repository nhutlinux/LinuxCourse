#include <linux/module.h>
#include <linux/platform_device.h>      /* For Platform devices */
#include <linux/gpio/consumer.h>        /* For Descriptor based GPIO */
#include <linux/of.h>                   /* For Device Tree support */

#define LOW         1
#define HIGH        0

struct gpio_desc *gpio_27;

static const struct of_device_id gpio_dt_ids[] = {
    { .compatible = "gpio-descriptor-base", },
    { /* sentinel */ }
};

static int mgpio_driver_probe(struct platform_device *pdev)
{
    struct device *dev = &pdev->dev;

    /* Get GPIO descriptor for GPIO 27 */
    gpio_27 = gpiod_get(dev, "led27", GPIOD_OUT_LOW);

    /* Set GPIO 27 to HIGH */
    gpiod_set_value(gpio_27, HIGH);
    pr_info("DevLinux: %s %d\n", __func__, __LINE__);

    return 0;
}

static void mgpio_driver_remove(struct platform_device *pdev)
{
    /* Set GPIO 27 to LOW before removing */
    gpiod_set_value(gpio_27, LOW);
    gpiod_put(gpio_27);
    pr_info("DevLinux: %s %d\n", __func__, __LINE__);
}

static struct platform_driver mgpio = {
    .probe = mgpio_driver_probe,
    .remove = mgpio_driver_remove,
    .driver = {
        .name = "gpio-descriptor-base",
        .of_match_table = of_match_ptr(gpio_dt_ids),
        .owner = THIS_MODULE,
    },
};

module_platform_driver(mgpio);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("DevLinux");
MODULE_DESCRIPTION("Integer GPIO Driver For Raspberry Pi Zero 2 W (BCM2835)");
MODULE_VERSION("1.0");
